/*
 * Workspace API
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.genesys.internal.workspace.api;

import com.genesys.internal.common.ApiCallback;
import com.genesys.internal.common.ApiClient;
import com.genesys.internal.common.ApiException;
import com.genesys.internal.common.ApiResponse;
import com.genesys.internal.common.Configuration;
import com.genesys.internal.common.Pair;
import com.genesys.internal.common.ProgressRequestBody;
import com.genesys.internal.common.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationsApi {
    private ApiClient apiClient;

    public NotificationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for notifications
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call notificationsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call notificationsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = notificationsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enables subscription to CometD notification API
     * Receives one of CometD notification events The following events are available&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/initialization&lt;/h5&gt; Value:&lt;br&gt;   {&lt;br&gt;     data : {&lt;br&gt;       state:  &#39;initialization state&#39;&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;Complete\&quot;&lt;/b&gt; Initialization was completed successfully&lt;/li&gt;   &lt;li&gt;&lt;b&gt;\&quot;Failed\&quot;&lt;/b&gt;   Initialization failed&lt;/li&gt;         &lt;/ul&gt;&lt;br&gt;     }&lt;br&gt;   }&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/voice&lt;/h5&gt; Type: &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;CallStateChanged\&quot;&lt;/b&gt;  Call status or state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         call: {&lt;br&gt;           id: &#39;016202a673223196&#39;,&lt;br&gt;           phoneNumber: &#39;7504772884&#39;,&lt;br&gt;           connId: &#39;016202a673223196&#39;,&lt;br&gt;           callUuid: &#39;00PJ6OJ3OSCMR24QETB382LAES000CIG&#39;,&lt;br&gt;           extensions: [ [list of DN extensions] ],&lt;br&gt;           dnis: &#39;7504772885&#39;,&lt;br&gt;           callType: &#39;Internal&#39;,&lt;br&gt;           state: &#39;state&#39;,&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;&lt;b&gt;\&quot;Ringing\&quot;&lt;/b&gt;  Ringing in progress     &lt;li&gt;&lt;b&gt;\&quot;Dialing\&quot;&lt;/b&gt;  Dialing in progress     &lt;li&gt;&lt;b&gt;\&quot;Established&lt;/b&gt;  Call established     &lt;li&gt;&lt;b&gt;\&quot;Released&lt;/b&gt;  Call released             &lt;/ul&gt; &lt;br&gt;           participants: [ [list of participants] ],&lt;br&gt;           capabilities:&lt;br&gt;             [ &#39;release&#39;,&lt;br&gt;               &#39;clear&#39;,&lt;br&gt;               &#39;attach-user-data&#39;,&lt;br&gt;               &#39;update-user-data&#39;,&lt;br&gt;               &#39;delete-user-data-pair&#39;,&lt;br&gt;               &#39;send-dtmf&#39;,&lt;br&gt;               &#39;start-recording&#39;&lt;br&gt;             ],&lt;br&gt;           duration: 0 &lt;br&gt;         },&lt;br&gt;         type: &#39;CallStateChanged&#39; &lt;br&gt;       }&lt;br&gt;   &lt;li&gt;&lt;b&gt;\&quot;DnStateChanged\&quot;&lt;/b&gt;  DN state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         dn: { &lt;br&gt;           number: &#39;7504772884&#39;,&lt;br&gt;           switchName: &#39;ap-southeast-2&#39;,&lt;br&gt;           agentId: &#39;7504772884&#39;,&lt;br&gt;           capabilities: [ &#39;ready&#39;, &#39;not-ready&#39;, &#39;dnd-on&#39;, &#39;set-forward&#39; ],&lt;br&gt;           agentState: &#39;LoggedOut&#39;,&lt;br&gt;           agentWorkMode: &#39;Unknown&#39; &lt;br&gt;         },&lt;br&gt;         type: &#39;DnStateChanged&#39; &lt;br&gt;       } &lt;/ul&gt; 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void notifications() throws ApiException {
        notificationsWithHttpInfo();
    }

    /**
     * Enables subscription to CometD notification API
     * Receives one of CometD notification events The following events are available&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/initialization&lt;/h5&gt; Value:&lt;br&gt;   {&lt;br&gt;     data : {&lt;br&gt;       state:  &#39;initialization state&#39;&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;Complete\&quot;&lt;/b&gt; Initialization was completed successfully&lt;/li&gt;   &lt;li&gt;&lt;b&gt;\&quot;Failed\&quot;&lt;/b&gt;   Initialization failed&lt;/li&gt;         &lt;/ul&gt;&lt;br&gt;     }&lt;br&gt;   }&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/voice&lt;/h5&gt; Type: &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;CallStateChanged\&quot;&lt;/b&gt;  Call status or state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         call: {&lt;br&gt;           id: &#39;016202a673223196&#39;,&lt;br&gt;           phoneNumber: &#39;7504772884&#39;,&lt;br&gt;           connId: &#39;016202a673223196&#39;,&lt;br&gt;           callUuid: &#39;00PJ6OJ3OSCMR24QETB382LAES000CIG&#39;,&lt;br&gt;           extensions: [ [list of DN extensions] ],&lt;br&gt;           dnis: &#39;7504772885&#39;,&lt;br&gt;           callType: &#39;Internal&#39;,&lt;br&gt;           state: &#39;state&#39;,&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;&lt;b&gt;\&quot;Ringing\&quot;&lt;/b&gt;  Ringing in progress     &lt;li&gt;&lt;b&gt;\&quot;Dialing\&quot;&lt;/b&gt;  Dialing in progress     &lt;li&gt;&lt;b&gt;\&quot;Established&lt;/b&gt;  Call established     &lt;li&gt;&lt;b&gt;\&quot;Released&lt;/b&gt;  Call released             &lt;/ul&gt; &lt;br&gt;           participants: [ [list of participants] ],&lt;br&gt;           capabilities:&lt;br&gt;             [ &#39;release&#39;,&lt;br&gt;               &#39;clear&#39;,&lt;br&gt;               &#39;attach-user-data&#39;,&lt;br&gt;               &#39;update-user-data&#39;,&lt;br&gt;               &#39;delete-user-data-pair&#39;,&lt;br&gt;               &#39;send-dtmf&#39;,&lt;br&gt;               &#39;start-recording&#39;&lt;br&gt;             ],&lt;br&gt;           duration: 0 &lt;br&gt;         },&lt;br&gt;         type: &#39;CallStateChanged&#39; &lt;br&gt;       }&lt;br&gt;   &lt;li&gt;&lt;b&gt;\&quot;DnStateChanged\&quot;&lt;/b&gt;  DN state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         dn: { &lt;br&gt;           number: &#39;7504772884&#39;,&lt;br&gt;           switchName: &#39;ap-southeast-2&#39;,&lt;br&gt;           agentId: &#39;7504772884&#39;,&lt;br&gt;           capabilities: [ &#39;ready&#39;, &#39;not-ready&#39;, &#39;dnd-on&#39;, &#39;set-forward&#39; ],&lt;br&gt;           agentState: &#39;LoggedOut&#39;,&lt;br&gt;           agentWorkMode: &#39;Unknown&#39; &lt;br&gt;         },&lt;br&gt;         type: &#39;DnStateChanged&#39; &lt;br&gt;       } &lt;/ul&gt; 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> notificationsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = notificationsValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Enables subscription to CometD notification API (asynchronously)
     * Receives one of CometD notification events The following events are available&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/initialization&lt;/h5&gt; Value:&lt;br&gt;   {&lt;br&gt;     data : {&lt;br&gt;       state:  &#39;initialization state&#39;&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;Complete\&quot;&lt;/b&gt; Initialization was completed successfully&lt;/li&gt;   &lt;li&gt;&lt;b&gt;\&quot;Failed\&quot;&lt;/b&gt;   Initialization failed&lt;/li&gt;         &lt;/ul&gt;&lt;br&gt;     }&lt;br&gt;   }&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/voice&lt;/h5&gt; Type: &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;CallStateChanged\&quot;&lt;/b&gt;  Call status or state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         call: {&lt;br&gt;           id: &#39;016202a673223196&#39;,&lt;br&gt;           phoneNumber: &#39;7504772884&#39;,&lt;br&gt;           connId: &#39;016202a673223196&#39;,&lt;br&gt;           callUuid: &#39;00PJ6OJ3OSCMR24QETB382LAES000CIG&#39;,&lt;br&gt;           extensions: [ [list of DN extensions] ],&lt;br&gt;           dnis: &#39;7504772885&#39;,&lt;br&gt;           callType: &#39;Internal&#39;,&lt;br&gt;           state: &#39;state&#39;,&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;&lt;b&gt;\&quot;Ringing\&quot;&lt;/b&gt;  Ringing in progress     &lt;li&gt;&lt;b&gt;\&quot;Dialing\&quot;&lt;/b&gt;  Dialing in progress     &lt;li&gt;&lt;b&gt;\&quot;Established&lt;/b&gt;  Call established     &lt;li&gt;&lt;b&gt;\&quot;Released&lt;/b&gt;  Call released             &lt;/ul&gt; &lt;br&gt;           participants: [ [list of participants] ],&lt;br&gt;           capabilities:&lt;br&gt;             [ &#39;release&#39;,&lt;br&gt;               &#39;clear&#39;,&lt;br&gt;               &#39;attach-user-data&#39;,&lt;br&gt;               &#39;update-user-data&#39;,&lt;br&gt;               &#39;delete-user-data-pair&#39;,&lt;br&gt;               &#39;send-dtmf&#39;,&lt;br&gt;               &#39;start-recording&#39;&lt;br&gt;             ],&lt;br&gt;           duration: 0 &lt;br&gt;         },&lt;br&gt;         type: &#39;CallStateChanged&#39; &lt;br&gt;       }&lt;br&gt;   &lt;li&gt;&lt;b&gt;\&quot;DnStateChanged\&quot;&lt;/b&gt;  DN state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         dn: { &lt;br&gt;           number: &#39;7504772884&#39;,&lt;br&gt;           switchName: &#39;ap-southeast-2&#39;,&lt;br&gt;           agentId: &#39;7504772884&#39;,&lt;br&gt;           capabilities: [ &#39;ready&#39;, &#39;not-ready&#39;, &#39;dnd-on&#39;, &#39;set-forward&#39; ],&lt;br&gt;           agentState: &#39;LoggedOut&#39;,&lt;br&gt;           agentWorkMode: &#39;Unknown&#39; &lt;br&gt;         },&lt;br&gt;         type: &#39;DnStateChanged&#39; &lt;br&gt;       } &lt;/ul&gt; 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call notificationsAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = notificationsValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for notificationsConnect
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call notificationsConnectCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/connect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call notificationsConnectValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = notificationsConnectCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Subscribes to CometD notifications
     * Subscribes to CometD notifications
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void notificationsConnect() throws ApiException {
        notificationsConnectWithHttpInfo();
    }

    /**
     * Subscribes to CometD notifications
     * Subscribes to CometD notifications
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> notificationsConnectWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = notificationsConnectValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Subscribes to CometD notifications (asynchronously)
     * Subscribes to CometD notifications
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call notificationsConnectAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = notificationsConnectValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for notificationsDisconnect
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call notificationsDisconnectCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/disconnect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call notificationsDisconnectValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = notificationsDisconnectCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Close CometD notification subscriptions
     * Close CometD notification subscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void notificationsDisconnect() throws ApiException {
        notificationsDisconnectWithHttpInfo();
    }

    /**
     * Close CometD notification subscriptions
     * Close CometD notification subscriptions
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> notificationsDisconnectWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = notificationsDisconnectValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Close CometD notification subscriptions (asynchronously)
     * Close CometD notification subscriptions
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call notificationsDisconnectAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = notificationsDisconnectValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for notificationsHandshake
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call notificationsHandshakeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/handshake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call notificationsHandshakeValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = notificationsHandshakeCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Subscribes to CometD notifications
     * Subscribes to CometD notifications
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void notificationsHandshake() throws ApiException {
        notificationsHandshakeWithHttpInfo();
    }

    /**
     * Subscribes to CometD notifications
     * Subscribes to CometD notifications
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> notificationsHandshakeWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = notificationsHandshakeValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Subscribes to CometD notifications (asynchronously)
     * Subscribes to CometD notifications
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call notificationsHandshakeAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = notificationsHandshakeValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for notificationsSubscribe
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call notificationsSubscribeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/subscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call notificationsSubscribeValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = notificationsSubscribeCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Subscribes CometD channel notification
     * Subscribes CometD channel notification.&lt;br&gt; &lt;h5&gt;The following channels are available right now:&lt;/h5&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;/workspace/v3/initialization&lt;/b&gt; Subscribe for initialization (login) event&lt;/li&gt; &lt;li&gt;&lt;b&gt;/workspace/v3/voice&lt;/b&gt; Subscribe for call state change notification event&lt;/li&gt; &lt;/ul&gt; 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void notificationsSubscribe() throws ApiException {
        notificationsSubscribeWithHttpInfo();
    }

    /**
     * Subscribes CometD channel notification
     * Subscribes CometD channel notification.&lt;br&gt; &lt;h5&gt;The following channels are available right now:&lt;/h5&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;/workspace/v3/initialization&lt;/b&gt; Subscribe for initialization (login) event&lt;/li&gt; &lt;li&gt;&lt;b&gt;/workspace/v3/voice&lt;/b&gt; Subscribe for call state change notification event&lt;/li&gt; &lt;/ul&gt; 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> notificationsSubscribeWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = notificationsSubscribeValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Subscribes CometD channel notification (asynchronously)
     * Subscribes CometD channel notification.&lt;br&gt; &lt;h5&gt;The following channels are available right now:&lt;/h5&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;/workspace/v3/initialization&lt;/b&gt; Subscribe for initialization (login) event&lt;/li&gt; &lt;li&gt;&lt;b&gt;/workspace/v3/voice&lt;/b&gt; Subscribe for call state change notification event&lt;/li&gt; &lt;/ul&gt; 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call notificationsSubscribeAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = notificationsSubscribeValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for notificationsUnsubscribe
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call notificationsUnsubscribeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications/unsubscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call notificationsUnsubscribeValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = notificationsUnsubscribeCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unsubscribes CometD channel notification
     * Unsubscribes CometD channel notification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void notificationsUnsubscribe() throws ApiException {
        notificationsUnsubscribeWithHttpInfo();
    }

    /**
     * Unsubscribes CometD channel notification
     * Unsubscribes CometD channel notification
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> notificationsUnsubscribeWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = notificationsUnsubscribeValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Unsubscribes CometD channel notification (asynchronously)
     * Unsubscribes CometD channel notification
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call notificationsUnsubscribeAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = notificationsUnsubscribeValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for socketio
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call socketioCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/socket.io";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call socketioValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = socketioCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enables subscription to SocketIO notifications
     * Enables subscription to SocketIO notifications
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void socketio() throws ApiException {
        socketioWithHttpInfo();
    }

    /**
     * Enables subscription to SocketIO notifications
     * Enables subscription to SocketIO notifications
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> socketioWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = socketioValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Enables subscription to SocketIO notifications (asynchronously)
     * Enables subscription to SocketIO notifications
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call socketioAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = socketioValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
